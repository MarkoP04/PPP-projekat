unit db_u;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  FireDAC.Phys.MySQLDef, FireDAC.Phys.MySQL, Data.DB, FireDAC.Comp.Client,
  FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs,
  FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet;

type
  TDataModule1 = class(TDataModule)
    FDConnection1: TFDConnection;
    FDQuery1: TFDQuery;
    function WorkerLogin(const Password: Integer): Integer;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DataModule1: TDataModule1;

implementation

{$R *.dfm}

function TDataModule1.WorkerLogin(const Password: Integer): Integer;
begin

  Result := -1;
  FDQuery1.Close;

  FDQuery1.SQL.Text := 'SELECT worker_id FROM worker WHERE password = :Password';
  FDQuery1.ParamByName('Password').AsInteger := Password;
  FDQuery1.Open;

  if not FDQuery1.IsEmpty then
    Result := FDQuery1.FieldByName('worker_id').AsInteger;

  FDQuery1.Close;
end;

end.
